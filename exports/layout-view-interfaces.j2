{%- set startport = 1 %}
{%- set ports1 = 73 %}
{%- set ports2 = 6 %}
{%- set prefix1 = "gi" %}
{%- set prefix2 = "te" %}
{%- set offset = 0 %}
{%- set lanes = 0 %}
{%- set switch = queryset[0].device.device_type|replace(' ', '-') %}
{%- set first_linecard = 0 %}
{%- set last_linecard = 0 %}
{%- set vlans = queryset[0].device.site.region.vlan_groups.first().vlans.all()|list + queryset[0].device.site.vlans.all()|list %}

<!DOCTYPE html>
<html lang="en" data-netbox-color-mode="dark">
<head>
    <title>{{queryset[0].device}} Layout</title>
    <link rel="stylesheet" href="/static/netbox-external.css?v=3.4.4" onerror="window.location='/media-failure/?filename=netbox-external.css'">
    <link rel="stylesheet" href="/static/netbox-light.css?v=3.4.4" onerror="window.location='/media-failure/?filename=netbox-light.css'">
    <link rel="stylesheet" href="/static/netbox-dark.css?v=3.4.4" onerror="window.location='/media-failure/?filename=netbox-dark.css'">
    <link rel="icon" type="image/png" href="/static/netbox.ico">
    <link rel="apple-touch-icon" type="image/png" href="/static/netbox_touch-icon-180.png">
    <style>
        html {
            width: 100%;
            height: 100%;
            --row-height: 140px;
            --column-width: 170px;
            --port-active: rgb(49, 58, 64);
            --bg-col: rgb(27, 31, 34);
            --port-inactive: rgb(36, 40, 43);
            --text-primary: rgb(255, 255, 255);
            --text-secondary: rgba(255, 255, 255, 0.25);
            --weight: normal;
            --disabled: rgb(57, 29, 29);
            --disabled-text: rgb(106, 85, 85);
            --vision: rgb(42, 83, 44);
            --comms: rgb(68, 82, 83);
            --wifi: rgb(43, 70, 46);
            --router-panel: rgb(52, 93, 54);
            --omneo-1013: rgb(76, 66, 98);
            --omneo-1021: rgb(35, 88, 108);
            --omneo-1022: rgb(72, 95, 130);
            --hsl-offset: 0%;
            --port-patch: rgb(73, 12, 61);
            --qsfp-border: rgb(101, 105, 110);
            --header-bg: rgb(35, 46, 54);
        }

        html[data-netbox-color-mode="light"] {
            --row-height: 110px;
            --column-width: 170px;
            --port-active: rgb(219, 219, 219);
            --bg-col: rgb(255, 255, 255);
            --port-inactive: rgb(241, 241, 241);
            --text-primary: rgb(0, 0, 0);
            --text-secondary: rgba(0, 0, 0, 0.25);
            --weight: bold;
            --disabled: rgb(249, 201, 201);
            --disabled-text: rgb(106, 85, 85);
            --vision: rgb(87, 177, 90);
            --comms: rgb(158, 158, 158);
            --wifi: rgb(157, 251, 167);
            --router-panel: rgb(127, 223, 131);
            --omneo-1013: rgb(194, 167, 254);
            --omneo-1021: rgb(140, 223, 255);
            --omneo-1022: rgb(141, 186, 255);
            --hsl-offset: 30%;
            --port-patch: rgb(210, 162, 201);
            --qsfp-border: rgb(196, 196, 196);
            --header-bg: rgb(243, 243, 243);
        }

        body {
            width: 100%;
            background-color: var(--bg-col) !important;
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        main {
            display: grid;
            overflow: auto;
            grid-gap: 10px;
            padding: 5px 5px 15px 13px;
        }

        header {
            font-size: 24pt;
            color: var(--text-primary);
            font-weight: var(--weight);
            display: flex;
            align-items: center;
            background-color: var(--header-bg);
            padding: 10px;
            margin-bottom: 10px;
        }

        #frame {
            position: fixed;
            width: 50%;
            z-index: 1;
            height: 80%;
            margin-top: 5%;
            border-radius: 10px;
            border: solid 1px rgba(129, 129, 129, 0.42);
            place-self: center;
        }

        #frame[src=""] {
            display: none;
        }

        a.badge.link {
            font-size: 1rem;
        }
        .logo {
            height: 2em;
            margin-right: 10px;
        }
        .logo-dark {
            display: none;
        }

        .logo-light {
            display: block;
        }

        html[data-netbox-color-mode="dark"] .logo-dark {
            display: block;
        }

        html[data-netbox-color-mode="dark"] .logo-light {
            display: none;
        }

        .manage-link {
            font-size: 0.6em;
        }
        .manage-link a {
            text-decoration: none !important;
        }

        .to-cont {
          color: var(--text-primary);
          font-weight: var(--weight);
        }
        .to-device, .to-port {
            font-weight: normal;
            font-size: 0.9em;
        }
        .from-name,
        .from-label,
        .from-type,
        .from-cont,
        .port-mode,
        .to-label,
        .patch-cont,
        .to-type {
           display: none;
        }

        .switchport {
            position: relative;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            background-color: var(--port-active);
            border-radius: 10px;
            padding: 10px;
            z-index: 1;
            overflow: hidden;
        }
        .switchport > a {
            position: absolute;
            inset: 0;
            text-decoration: none !important;
        }
        .port-label {
            position: absolute;
            left: 50%;
            translate: -50% 0%;
            font-weight: bold;
            font-size: 34pt;
            color: var(--text-secondary);
            height: max-content;
            text-align: center;
            bottom: 0px;
            white-space: nowrap;
            padding-right: 2rem;
        }
        .empty {
            background-color: var(--port-inactive);
            border-radius: 10px;
            position: relative;
            overflow: hidden;
            font-size: 14pt;
            color: var(--text-secondary);
            font-weight: bold;
        }
        .empty-mode {
            text-align: center;
            font-size: 1rem;
        }
        .empty-text {
            height: 6em;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: space-evenly;
            line-height: 1;
            text-align: center;
            padding-inline: 7px;
        }
        .isPatch {
            background-color: var(--port-patch);
        }
        .show-patch .hasPatch {
            background-color: var(--port-patch);
        }
        .Fibre .port-label::after,
        [data-mode="1000base-x-sfp"] .port-label::after {
            content: " (SFP)";
        }
        [data-mode="10gbase-x-sfpp"] .port-label::after {
            content: " (SFP+)";
        }
        [data-mode="25gbase-x-sfp28"] .port-label::after {
            content: " (SFP28)";
        }

        [data-mode="1000base-x-sfp"] .port-label,
        [data-mode="10gbase-x-sfpp"] .port-label,
        [data-mode="25gbase-x-sfp28"] .port-label {
            font-size: 20pt !important;
        }
        .disabled {
            background-color: var(--disabled);
            color: var(--disabled-text);
        }
        .qsfp {
            background: var(--port-inactive);
            border-radius: 14px;
            margin: -4px;
            border: 2px solid var(--qsfp-border);
        }
        .blank {grid-area: blank;}

        {%- if switch == 'Catalyst-3850-48T' %}
            {%- set ports1 = 48 %}
            {%- set ports2 = 4 %}
            {%- set prefix1 = "gi1-0-" %}
            {%- set prefix2 = "gi1-1-" %}
            main {
                grid-template-areas: "e1 e3 e5 e7 e9 e11 e13 e15 e17 e19 e21 e23 e25 e27 e29 e31 e33 e35 e37 e39 e41 e43 e45 e47 blank blank blank blank" "e2 e4 e6 e8 e10 e12 e14 e16 e18 e20 e22 e24 e26 e28 e30 e32 e34 e36 e38 e40 e42 e44 e46 e48 f1 f2 f3 f4";
                grid-template-columns: repeat(29, var(--column-width));
                grid-template-rows: repeat(2, var(--row-height));
            }

        {%- elif switch == 'ProSafe-M4300-52G-PoE' or switch == 'ProSafe-M4300-52G' %}
            {%- set ports1 = 52 %}
            {%- set prefix1 = "0-" %}
            main {
                grid-template-areas: "e1 e3 e5 e7 e9 e11 e13 e15 e17 e19 e21 e23 e25 e27 e29 e31 e33 e35 e37 e39 e41 e43 e45 e47 e49 e51" "e2 e4 e6 e8 e10 e12 e14 e16 e18 e20 e22 e24 e26 e28 e30 e32 e34 e36 e38 e40 e42 e44 e46 e48 e50 e52";
                grid-template-columns: repeat(26, var(--column-width));
                grid-template-rows: repeat(2, var(--row-height));
            }

        {%- elif switch == 'EX4300-48' %}
            {%- set startport = 0 %}
            {%- set ports1 = 48 %}
            {%- set ports2 = 4 %}
            {%- set prefix1 = "ge-0-0-" %}
            {%- set prefix2 = "xe-0-2-" %}
            main {
                grid-template-areas: "e0 e2 e4 e6 e8 e10 e12 e14 e16 e18 e20 e22 e24 e26 e28 e30 e32 e34 e36 e38 e40 e42 e44 e46 blank blank blank blank" "e1 e3 e5 e7 e9 e11 e13 e15 e17 e19 e21 e23 e25 e27 e29 e31 e33 e35 e37 e39 e41 e43 e45 e47 f0 f1 f2 f3";
                grid-template-columns: repeat(28, var(--column-width));
                grid-template-rows: repeat(2, var(--row-height));
            }

        {%- elif switch == 'S5800-48F4SR' %}
            {%- set ports1 = 52 %}
            {%- set prefix1 = "eth-0-" %}
            main {
                grid-template-areas: "e1 e3 e5 e7 e9 e11 e13 e15 e17 e19 e21 e23 e25 e27 e29 e31 e33 e35 e37 e39 e41 e43 e45 e47 e49 e51" "e2 e4 e6 e8 e10 e12 e14 e16 e18 e20 e22 e24 e26 e28 e30 e32 e34 e36 e38 e40 e42 e44 e46 e48 e50 e52";
                grid-template-columns: repeat(28, var(--column-width));
                grid-template-rows: repeat(2, var(--row-height));
            }

        {%- elif switch == 'S5800-48F4S' %}
            {%- set ports1 = 52 %}
            {%- set prefix1 = "eth-0-" %}
            main {
                grid-template-areas: "e1 e3 e5 e7 e9 e11 e13 e15 e17 e19 e21 e23 e25 e27 e29 e31 e33 e35 e37 e39 e41 e43 e45 e47 blank blank blank blank" "e2 e4 e6 e8 e10 e12 e14 e16 e18 e20 e22 e24 e26 e28 e30 e32 e34 e36 e38 e40 e42 e44 e46 e48 e49 e50 e51 e52";
                grid-template-columns: repeat(28, var(--column-width));
                grid-template-rows: repeat(2, var(--row-height));
            }

        {%- elif switch == 'SRX1500' %}
            {%- set startport = 0 %}
            {%- set ports1 = 16 %}
            {%- set prefix1 = "ge-0-0-" %}
            {%- set ports2 = 4 %}
            {%- set prefix2 = "xe-0-0-" %}
            {%- set offset = 16 %}
            main {
                grid-template-areas: "e0 e2 e4 e6 e8 e10 e12 e14 f0 f2" "e1 e3 e5 e7 e9 e11 e13 e15 f1 f3";
                grid-template-columns: repeat(26, var(--column-width));
                grid-template-rows: repeat(2, var(--row-height));
            }

        {%- elif switch == 'DCS-7010T-48' %}
            {%- set ports1 = 52 %}
            {%- set prefix1 = "Ethernet" %}
            main {
                grid-template-areas: "e1 e3 e5 e7 e9 e11 e13 e15 e17 e19 e21 e23 e25 e27 e29 e31 e33 e35 e37 e39 e41 e43 e45 e47 e49 e51" "e2 e4 e6 e8 e10 e12 e14 e16 e18 e20 e22 e24 e26 e28 e30 e32 e34 e36 e38 e40 e42 e44 e46 e48 e50 e52";
                grid-template-columns: repeat(28, var(--column-width));
                grid-template-rows: repeat(2, var(--row-height));
            }

        {%- elif switch == 'Nexus-93180YC-FX3' %}
            {%- set ports1 = 48 %}
            {%- set ports2 = 6 %}
            {%- set prefix1 = "Ethernet1-" %}
            {%- set prefix2 = "Ethernet1-" %}
            {%- set offset = 48 %}
            {%- set lanes = 4 %}
            main {
                grid-template-areas: "e1 e3 e5 e7 e9 e11 e13 e15 e17 e19 e21 e23 e25 e27 e29 e31 e33 e35 e37 e39 e41 e43 e45 e47 q49-1 q49-2 q49-3 q49-4 q51-1 q51-2 q51-3 q51-4 q53-1 q53-2 q53-3 q53-4" "e2 e4 e6 e8 e10 e12 e14 e16 e18 e20 e22 e24 e26 e28 e30 e32 e34 e36 e38 e40 e42 e44 e46 e48 q50-1 q50-2 q50-3 q50-4 q52-1 q52-2 q52-3 q52-4 q54-1 q54-2 q54-3 q54-4";
                grid-template-columns: repeat(36, var(--column-width));
                grid-template-rows: repeat(2, var(--row-height));
            }
            .port_{{prefix2}}53-1 {grid-area: q53-1 / q53-1 / q53-1 / q53-4 !important;}
            .port_{{prefix2}}54-1 {grid-area: q54-1 / q54-1 / q54-1 / q54-4 !important;}
        {%- elif switch == 'DCS-7280SR-48C6' %}
            {%- set ports1 = 48 %}
            {%- set ports2 = 6 %}
            {%- set prefix1 = "Ethernet" %}
            {%- set prefix2 = "Ethernet" %}
            {%- set offset = 48 %}
            {%- set lanes = 4 %}
            main {
                grid-template-areas: "e1 e3 e5 e7 e9 e11 e13 e15 e17 e19 e21 e23 q49-1 q49-2 q49-3 q49-4 q51-1 q51-2 q51-3 q51-4 q53-1 q53-2 q53-3 q53-4 e25 e27 e29 e31 e33 e35 e37 e39 e41 e43 e45 e47" "e2 e4 e6 e8 e10 e12 e14 e16 e18 e20 e22 e24 q50-1 q50-2 q50-3 q50-4 q52-1 q52-2 q52-3 q52-4 q54-1 q54-2 q54-3 q54-4 e26 e28 e30 e32 e34 e36 e38 e40 e42 e44 e46 e48";
                grid-template-columns: repeat(36, var(--column-width));
                grid-template-rows: repeat(2, var(--row-height));
            }
        {%- elif switch == 'DCS-7050SX3-48YC12' %}
            {%- set ports1 = 48 %}
            {%- set ports2 = 12 %}
            {%- set prefix1 = "Ethernet" %}
            {%- set prefix2 = "Ethernet" %}
            {%- set offset = 48 %}
            {%- set lanes = 4 %}
            main {
                grid-template-areas:  "e1 e3 e5 e7 e9 e11 e13 e15 q49-1 q49-2 q49-3 q49-4 q51-1 q51-2 q51-3 q51-4 q53-1 q53-2 q53-3 q53-4 q55-1 q55-2 q55-3 q55-4 q57-1 q57-2 q57-3 q57-4 q59-1 q59-2 q59-3 q59-4 e17 e19 e21 e23 e25 e27 e29 e31" "e2 e4 e6 e8 e10 e12 e14 e16 q50-1 q50-2 q50-3 q50-4 q52-1 q52-2 q52-3 q52-4 q54-1 q54-2 q54-3 q54-4 q56-1 q56-2 q56-3 q56-4 q58-1 q58-2 q58-3 q58-4 q60-1 q60-2 q60-3 q60-4 e18 e20 e22 e24 e26 e28 e30 e32" "e33 e34 e35 e36 e37 e38 e39 e40 blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank blank e41 e42 e43 e44 e45 e46 e47 e48";
                grid-template-columns: repeat(40, var(--column-width));
                grid-template-rows: repeat(3, var(--row-height));
            }
            .port_{{prefix2}}59-1 {grid-area: q59-1 / q59-1 / q59-1 / q59-4 !important;}
            .port_{{prefix2}}60-1 {grid-area: q60-1 / q60-1 / q60-1 / q60-4 !important;}
        {%- elif switch == 'SG300-10PP' or switch == 'SG300-10' or switch == 'SG350-10PP' %}
            {%- set ports1 = 10 %}
            main {
                grid-template-areas: "e1 e2 e3 e4 e5 e6 e7 e8 e9 f9 e10 f10";
                grid-template-columns: repeat(12, var(--column-width));
                grid-template-rows: repeat(1, var(--row-height));
            }
        {%- elif switch == 'SG350-20P' or switch == 'SG350-20' %}
            {%- set ports1 = 22 %}
            main {
                grid-template-areas: "e1 e2 e3 e4 e5 e6 e7 e8 e17 f17 f19" "e9 e10 e11 e12 e13 e14 e15 e16 e18 f18 f20";
                grid-template-columns: repeat(11, var(--column-width));
                grid-template-rows: repeat(2, var(--row-height));
            }

        {%- elif switch == 'SG220-26P' or switch == 'SG220-26' %}
            {%- set ports1 = 26 %}
            main {
                grid-template-areas: "e1 e2 e3 e4 e5 e6 e7 e8 e9 e10 e11 e12 e25 f25" "e13 e14 e15 e16 e17 e18 e19 e20 e21 e22 e23 e24 e26 f26";
                grid-template-columns: repeat(14, var(--column-width));
                grid-template-rows: repeat(2, var(--row-height));
            }
        {%- elif switch == 'DCS-7150S-52' %}
            {%- set ports1 = 52 %}
            {%- set prefix1 = "Ethernet" %}
            main {
                grid-template-areas: "e1 e3 e5 e7 e9 e11 e13 e15 e17 e19 e21 e23 e25 e27 e29 e31 e33 e35 e37 e39 e41 e43 e45 e47 e49 e51" "e2 e4 e6 e8 e10 e12 e14 e16 e18 e20 e22 e24 e26 e28 e30 e32 e34 e36 e38 e40 e42 e44 e46 e48 e50 e52";
                grid-template-columns: repeat(26, var(--column-width));
                grid-template-rows: repeat(2, var(--row-height));
            }
        {%- elif switch == 'DCS-7150S-24' %}
            {%- set ports1 = 24 %}
            {%- set prefix1 = "Ethernet" %}
            main {
                grid-template-areas: "e1 e3 e5 e7 e9 e11 e13 e15 e17 e19 e21 e23" "e2 e4 e6 e8 e10 e12 e14 e16 e18 e20 e22 e24";
                grid-template-columns: repeat(12, var(--column-width));
                grid-template-rows: repeat(2, var(--row-height));
            }
        {%- elif switch == 'CBS350-48P-4X' %}
            {%- set ports1 = 48 %}
            {%- set ports2 = 4 %}
            {%- set prefix1 = "GE1-0-" %}
            {%- set prefix2 = "XG1-0-" %}
            main {
                grid-template-areas: "e1 e3 e5 e7 e9 e11 e13 e15 e17 e19 e21 e23 e25 e27 e29 e31 e33 e35 e37 e39 e41 e43 e45 e47 f1 f3" "e2 e4 e6 e8 e10 e12 e14 e16 e18 e20 e22 e24 e26 e28 e30 e32 e34 e36 e38 e40 e42 e44 e46 e48 f2 f4";
                grid-template-columns: repeat(26, var(--column-width));
                grid-template-rows: repeat(2, var(--row-height));
            }
        {%- elif switch == 'Nexus-3548-X' %}
            {%- set ports1 = 48 %}
            {%- set prefix1 = "Ethernet1-" %}
            main {
                grid-template-areas: "e1 e3 e5 e7 e9 e11 e13 e15 e17 e19 e21 e23 e25 e27 e29 e31 e33 e35 e37 e39 e41 e43 e45 e47" "e2 e4 e6 e8 e10 e12 e14 e16 e18 e20 e22 e24 e26 e28 e30 e32 e34 e36 e38 e40 e42 e44 e46 e48";
                grid-template-columns: repeat(24, var(--column-width));
                grid-template-rows: repeat(2, var(--row-height));
            }
        {%- elif switch == 'CCS-720XP-48Y6' %}
            {%- set ports1 = 54 %}
            {%- set prefix1 = "Ethernet" %}
            main {
                grid-template-areas: "e1 e3 e5 e7 e9 e11 e13 e15 e17 e19 e21 e23 e25 e27 e29 e31 e33 e35 e37 e39 e41 e43 e45 e47 e49 e51 e53" "e2 e4 e6 e8 e10 e12 e14 e16 e18 e20 e22 e24 e26 e28 e30 e32 e34 e36 e38 e40 e42 e44 e46 e48 e50 e52 e54";
                grid-template-columns: repeat(27, var(--column-width));
                grid-template-rows: repeat(2, var(--row-height));
            }
        {%- elif switch == 'DCS-7508N' %}
            {%- set ports1 = 36 %}
            {%- set prefix1 = "Ethernet" %}
            {%- set first_linecard = 3 %}
            {%- set last_linecard = 8 %}
            {%- set lanes = 4 %}
            main {
                grid-template-areas: {% for card in range(last_linecard - first_linecard + 1) %}
                        "{% for port in range(ports1+startport-1) %}{% if port % 2 == 1 %}{% for lane in range(lanes) %} b{{card + first_linecard}}-{{port + startport}}-{{lane+1}}{% endfor %}{% endif %}{% endfor %}"
                        "{% for port in range(ports1+startport-1) %}{% if port % 2 == 0 %}{% for lane in range(lanes) %} q{{card + first_linecard}}-{{port + startport}}-{{lane+1}}{% endfor %}{% endif %}{% endfor %}"
                        "{% for port in range(ports1+startport-1) %}{% if port % 2 == 1 %}{% for lane in range(lanes) %} q{{card + first_linecard}}-{{port + startport}}-{{lane+1}}{% endfor %}{% endif %}{% endfor %}"
                    {%- endfor %};
                grid-template-columns: repeat(72, var(--column-width));
                grid-template-rows: repeat(18, var(--row-height));
            }
        {% endif %}

        {% for i in range(ports1+startport) %}
            .port_{{prefix1}}{{i}} {
                grid-area:e{{i}};
            }
            .port_{{prefix1}}{{i}}.Fibre {
                grid-area:f{{i}};
            }
        {% endfor %}

        {% for i in range(ports2+startport) %}
            {% if lanes > 0 %}
                {% for lane in range(lanes) %}
                    .port_{{prefix2}}{{i+offset+startport}}-{{lane+1}} {
                        grid-area: q{{i+offset+startport}}-{{lane+1}};
                    }
                {% endfor %}
                .qsfp-{{i+startport}} {
                    grid-area: q{{i+offset+startport}}-1 / q{{i+offset+startport}}-1 / q{{i+offset+startport}}-1 / q{{i+offset+startport}}-4;
                }
            {% else %}
                .port_{{prefix2}}{{i+offset+startport}} {
                    grid-area: f{{i+startport}};
                }
            {% endif %}
        {% endfor %}

        {% for cardNum in range(last_linecard - first_linecard + 1) %}
            {% set card = cardNum + first_linecard %}
            {% for portNum in range(ports1+startport) %}
                {% set port = portNum + startport %}

                {% if lanes > 0 %}
                    {% for lane in range(lanes) %}
                        .port_{{prefix1}}{{card}}-{{port}}-{{lane+1}} {
                            grid-area: q{{card}}-{{port}}-{{lane+1}};
                        }
                    {% endfor %}
                    .qsfp-{{card}}-{{port}} {
                        grid-area: q{{card}}-{{port}}-1 / q{{card}}-{{port}}-1 / q{{card}}-{{port}}-1 / q{{card}}-{{port}}-4;
                    }
                {% else %}
                    .port_{{prefix1}}{{card}}-{{port}}-1 {
                        grid-area: f{{card}}-{{port}};
                    }
                {% endif %}
            {% endfor %}
            .linecardHeader-{{card}} {
                grid-area: b{{card}}-2-1;
            }
        {% endfor %}

        @media print {
            html[data-netbox-color-mode="light"],
            html[data-netbox-color-mode="dark"] {
                font-size: 18pt;
                --row-height: 180px;
                --column-width: 190px;
                --port-active: rgb(219, 219, 219);
                --bg-col: rgb(255, 255, 255);
                --port-inactive: rgb(241, 241, 241);
                --text-primary: rgb(0, 0, 0);
                --text-secondary: rgba(0, 0, 0, 0.25);
                --weight: bold;
                --disabled: rgb(249, 201, 201);
                --disabled-text: rgb(106, 85, 85);
                --vision: rgb(87, 177, 90);
                --comms: rgb(158, 158, 158);
                --wifi: rgb(157, 251, 167);
                --router-panel: rgb(127, 223, 131);
                --omneo-1013: rgb(194, 167, 254);
                --omneo-1021: rgb(140, 223, 255);
                --omneo-1022: rgb(141, 186, 255);
            }
            .switchport {
                border: 1px solid rgb(191, 191, 191);
            }

            .logo-dark {
                display: none !important;
            }

            .logo-light {
                display: block !important;
            }

            a {
                text-decoration: none !important;
                color: black !important;
            }
            .manage-link {
                display: none;
            }
        }
        .Switch .link-normal {
            display: contents;
        }
        .link-switch {
            display: contents;
        }
        .Switch .link-switch {
            display: block;
        }
        .link-switch,
        .link-normal {
            z-index: 1;
        }
        .show-fibre [data-type="mmf"],
        .show-fibre [data-type="mmf-om3"],
        .show-fibre [data-type="mmf-om4"] {
            background-color: #25637b !important;
            background: repeating-linear-gradient( 135deg, #148cbb , #148cbb 20px, #873ae3 20px, #873ae3 40px );
        }
        .show-fibre [data-type="smf"],
        .show-fibre [data-type="smf-os1"],
        .show-fibre [data-type="smf-os2"] {
            background-color: #7b7d23 !important;
        }

        .vlanAssign,
        .vlanButtons,
        .type-vlan {
            display: none;
        }
        .show-vlans .type-vlan {
            display: block;
            position: absolute;
            left: 50%;
            translate: -50% 0%;
            font-weight: bold;
            font-size: 34pt;
            color: var(--text-secondary);
            height: max-content;
            text-align: center;
            top: 0px;
            white-space: nowrap;
        }

        .show-vlans .vlanAssign {
            display: block;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 2;
            cursor: pointer;
        }

        .show-vlans .link-normal,
        .show-vlans .empty-text,
        .show-vlans .to-cont {
            display: none;
        }

        .show-vlans .vlanButtons {
            display: flex;
            flex-wrap: wrap;
        }

        .vlanAssignSelected {
            background: repeating-linear-gradient( 45deg, rgba(231, 231, 231, 0.26), rgba(231, 231, 231, 0.26) 10px, rgba(120, 120, 120, 0.26) 10px, rgba(120, 120, 120, 0.26) 20px );
            border: 3px solid rgb(163, 163, 163);
            border-radius: 10px;
        }

        .vlanAssignSelected::before{
            content: "Selected";
            padding: 10px;
            color: rgb(35, 35, 35);
            font-weight: bold;
            font-size: 1rem
        }

        .vlanAssignButton {
            padding: 5px 10px;
            border-radius: 5px !important;
            margin: 5px !important;
            cursor: pointer !important;
            border: none;
            appearance: none !important;
        }

        .show-patch .patch-cont {
            display: block;
        }
        .show-patch .to-cont {
            display: none;
        }
        [data-mode="1000base-t"]::before {
            background-image: url(/static/ethernet.png);
        }
        [data-mode="40gbase-x-sfp28"]::before,
        [data-mode="50gbase-x-sfp28"]::before,
        [data-mode="100gbase-x-qsfp28"]::before {
            background-image: url(/static/QSFP-Icon.svg);
            background-size: 4rem !important;
        }
        [data-mode="10gbase-x-sfpp"]::before,
        [data-mode="1000base-x-sfp"]::before,
        [data-mode="25gbase-x-sfp28"]::before {
            background-image: url(/static/SFP-Icon.svg);
        }
        .empty::before,
        .switchport::before {
            content: "";
            background-size: 2.5rem;
            background-repeat: no-repeat;
            background-position-x: right;
            background-position-y: bottom;
            opacity: 0.3;
            position: absolute;
            inset: 0;
            text-decoration: none !important;
        }
        .linecardHeader {
            font-size: 33pt;
            white-space: nowrap;
            line-height: 3;
        }

        .quickTerm {
            z-index: 1;
            color: rgb(182, 182, 182) !important;
            font-size: 1rem;
            text-decoration: none !important;
        }
    </style>
    <script type="text/javascript" src="/static/setmode.js" onerror="window.location='/media-failure/?filename=setmode.js'"></script>
    <script>
        const vlans = {
            {%- for vlan in vlans %}
            {%- if vlan.vid is defined %}
                {%- set hsl = namespace(h=204) %}
                {%- set hsl = namespace(s=13) %}
                {%- set hsl = namespace(l=22) %}
                {%- if vlan.vid %}
                    {%- if vlan.vid > 39 and vlan.vid < 50 %}
                        {%- set shift = (vlan.vid|int() - 40) %}
                        {%- set hsl.h = 145 - shift * 3 %}
                        {%- set hsl.s = 22 + shift * 7 %}
                        {%- set hsl.l = 13 + shift * 3 %}
                    {%- elif vlan.vid > 999 and vlan.vid < 1050 %}
                        {%- set shift = (vlan.vid|int() - 1000) %}
                        {%- set hsl.h = 455 - shift * 6 %}
                        {%- set hsl.s = 40 %}
                        {%- set hsl.l = 25 %}
                    {%- elif vlan.vid == 170 %}
                        {%- set hsl.h = 202 %}
                        {%- set hsl.s = 51 %}
                        {%- set hsl.l = 35 %}
                    {%- else %}
                        {%- set hsl.h = 204 %}
                        {%- set hsl.s = 13 %}
                        {%- set hsl.l = 22 %}
                    {%- endif %}
                    {%- if vlan.cf.colour != None %}
                        {%- set colours = vlan.cf.colour.split(',') %}
                        "{{vlan.vid}}":"hsl({{colours[0]}},{{colours[1]}},calc({{colours[2]}} + var(--hsl-offset))",
                    {%- else %}
                        "{{vlan.vid}}":"hsl({{hsl.h}},{{hsl.s}}%,calc({{hsl.l}}% + var(--hsl-offset))",
                    {%- endif %}
                {%- endif %}
            {%- endif %}
            {%- endfor %}
            "none":"#00000000"
        }
        initMode()

        document.addEventListener("DOMContentLoaded", e => {
            const _typeSelect = document.getElementById('typeSelect');
            const bodyElement = document.getElementsByTagName('body')[0];

            function setMode(value) {
                bodyElement.classList.value="";
                switch (value) {
                    case "normal":
                        bodyElement.classList.value="";
                        break;
                    case "fibre":
                        bodyElement.classList.add('show-fibre');
                        break;
                    case "vlan":
                        bodyElement.classList.add('show-vlans');
                        break;
                    case "patch":
                        bodyElement.classList.add('show-patch');
                        break;
                    default:
                        break;
                }
            }

            setMode(_typeSelect.value);
            _typeSelect.addEventListener('change', e => setMode(e.target.value))

            const __vlanPorts = document.querySelectorAll(".vlanAssign");
            __vlanPorts.forEach(_port => _port.addEventListener("click", e => {
                _port.classList.toggle('vlanAssignSelected');
            }));

            const _quickTermButtons = document.querySelectorAll(".quickTerm");
            const _frame = document.getElementById('frame');
            _quickTermButtons.forEach(element => element.addEventListener("click", e => {
                const url = element.getAttribute('data-url');
                _frame.setAttribute('src', url);
            }))

            const _vlanButtons = document.querySelectorAll(".vlanAssignButton");
            _vlanButtons.forEach(element => element.addEventListener("click", e => {
                const __selectedPorts = document.querySelectorAll(".vlanAssignSelected");
                const vid = element.getAttribute('data-id');
                const vidid = vid == "none" ? null : element.getAttribute('data-idid');
                __selectedPorts.forEach(_port => {
                    _port.classList.remove('vlanAssignSelected');
                    const interfaceID = _port.getAttribute('data-id');
                    const url = `https://netbox.nep.group/api/dcim/interfaces/${interfaceID}/`;
                    const payload = {"untagged_vlan":vidid,"mode":"access"};
        
                    fetch(url, {
                        credentials: "omit",
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': 'Token 33cb389f41c7f8a4331c25947fd5966148cd56eb',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify(payload)
                    }).then(response => {
                        response.json().then(data=>{
                            const _parent = _port.parentElement;
                            const _vlanText = _parent.querySelector('.type-vlan');
                            const _vlanPretty = _parent.querySelector('.empty-mode');

                            if (data.untagged_vlan == null) {
                                _parent.removeAttribute('style');
                                _vlanText.remove();
                                _vlanPretty.remove();
                                return;
                            }
                            else _parent.setAttribute('style', `background-color: ${vlans[data.untagged_vlan.vid]}`);

                            if (_vlanText) _vlanText.innerHTML = data.untagged_vlan.vid;
                            else _parent.insertAdjacentHTML('beforeend', `<div class="type-vlan">${data.untagged_vlan.vid}</div>`);

                            if (_vlanPretty) _vlanPretty.innerHTML = data.untagged_vlan.display;
                            else _parent.querySelector('.empty-text').insertAdjacentHTML('beforeend', `<div class="empty-mode">${data.untagged_vlan.display}</div>`);
                        });
                    })
                });
            }));
        });

        function checkFrame(frameURL, location) {
            if (frameURL == "") return;
            if (!location.href.includes(frameURL.slice('return')[0])) {
                console.log([frameURL, location]);
            }
        }
    </script>
</head>
<body>
    <header class="overflow-scroll ws-nowrap">
        <a href="/">
            <img src="/static/nep_logo.svg" class="sidenav-brand-img logo-light logo" alt="NetBox Logo" height="48">
            <img src="/static/nep_logo_light.svg" class="sidenav-brand-img logo-dark logo" alt="NetBox Logo" height="48">
        </a>
        <a href="/dcim/devices/{{queryset[0].device.id}}">{{queryset[0].device}} </a>
        <span>&nbsp;Layout -&nbsp;</span>
        <a href="/dcim/device-types/{{queryset[0].device.device_type.id}}"> {{queryset[0].device.device_type}}</a>
        <span class="manage-link">
            {% if queryset[0].device.primary_ip4 %}
                {% set ip = queryset[0].device.primary_ip4|ip() %}
                {% set deviceType = queryset[0].device.device_type %}
                {% if deviceType.cf.ssh == True %}
                    <a class="badge bg-green ms-4 link" href="ssh://admin@{{ip}}"><i class="mdi mdi-monitor-lock"></i> SSH <i class="mdi mdi-open-in-new" style="margin-left:0.2em"></i></a>
                {% endif %}
                {% if deviceType.cf.http != "Neither" %}
                    <a class="badge bg-green ms-2 link" href="{{deviceType.cf.http}}://{{ip}}" target="_blank"><i class="mdi mdi-cloud-lock"></i> {{deviceType.cf.http|upper()}} <i class="mdi mdi-open-in-new" style="margin-left:0.2em"></i></a>
                {% endif %}
                <a class="badge bg-blue ms-2 link" href="/dcim/devices/{{queryset[0].device.id}}/render-config/?export=True" target="_blank"><i class="mdi mdi-download"></i> Config</a>
            {% endif %}
            <label for="typeSelect" class="ms-2">Choose data to show</label>
            <select id="typeSelect">
                <option value="normal">Default</option>
                <option value="fibre">Fibre Mode</option>
                <option value="patch">First Patch</option>
                <option value="vlan">VLANs</option>
            </select>
        </span>

    </header>
    <main class="{{switch}}">
        {% for interface in queryset %}
            {% set label = interface.label|replace('/','-') %}
            {% set name = interface.name|replace('(','')|replace(')','') %}
            {% set vlan = 'vlan_' ~ interface.untagged_vlan.vid %}

            {% set hsl = namespace(h=204) %}
            {% set hsl = namespace(s=13) %}
            {% set hsl = namespace(l=22) %}
            {% set background = namespace(value="") %}

            {% if interface.untagged_vlan.vid %}
                {% if interface.untagged_vlan.vid > 39 and interface.untagged_vlan.vid < 50 %}
                    {% set shift = (interface.untagged_vlan.vid|int() - 40) %}
                    {% set hsl.h = 145 - shift * 3 %}
                    {% set hsl.s = 22 + shift * 7 %}
                    {% set hsl.l = 13 + shift * 3 %}
                {% elif interface.untagged_vlan.vid > 999 and interface.untagged_vlan.vid < 1050 %}
                    {% set shift = (interface.untagged_vlan.vid|int() - 1000) %}
                    {% set hsl.h = 455 - shift * 6 %}
                    {% set hsl.s = 40 %}
                    {% set hsl.l = 25 %}
                {% elif interface.untagged_vlan.vid == 170 %}
                    {% set hsl.h = 202 %}
                    {% set hsl.s = 51 %}
                    {% set hsl.l = 35 %}
                {% else %}
                    {% set hsl.h = 204 %}
                    {% set hsl.s = 13 %}
                    {% set hsl.l = 22 %}
                {% endif %}
                {% set background.value = "background-color: hsl("~hsl.h~","~hsl.s~"%,calc("~hsl.l~"% + var(--hsl-offset))" %}
                {%- if interface.untagged_vlan.cf.colour != None %}
                    {%- set colours = interface.untagged_vlan.cf.colour.split(',') %}
                    {%- set background.value = "background-color: hsl("~colours[0]~","~colours[1]~",calc("~colours[2]~" + var(--hsl-offset))" %}
                {%- endif %}
            {% endif %}


            {% if interface.mgmt_only == false and interface.is_virtual == false and interface.is_lag == false and interface.type != "juniper-vcp" %}
                {% if interface.link_peers %}
                    {% set connection = namespace(far="") %}
                    {% if interface.connected_endpoints|first %}
                        {% set connection.far = interface.connected_endpoints|first %}
                        {% set connection.isPatch = False %}
                    {% else %}
                        {% set connection.far = interface.link_peers|first %}
                        {% set connection.isPatch = True %}
                    {% endif %}

                    {% if interface.connected_endpoints|first == interface.link_peers|first %}
                        {% set connection.hasPatch = False %}
                    {% else %}
                        {% set connection.hasPatch = True %}
                    {% endif %}

                    {% set connection.patch = interface.link_peers|first %}

                    <section class="switchport {{vlan}} {% for tag in connection.far.device.tags.names() %}{{tag|replace(' ','-') }} {% endfor %}port_{{label}} {{name}}{% if connection.hasPatch %} hasPatch{% endif %}{% if connection.isPatch %} isPatch{% endif %}"
                        data-mode="{{interface.type}}"
                        data-cable="{{interface.cable.color}}"
                        data-type="{{interface.cable.type}}"
                        style="{{background.value}}"
                    >
                        <div class="vlanAssign" data-id="{{interface.id}}"></div>
                        <a class="link-normal" href="/dcim/devices/{{ connection.far.device.id}}" target="_blank"></a>
                        <a class="link-switch" href="/dcim/interfaces/?device_id={{connection.far.device.id}}&export=interface-layouts"></a>
                        <div class="from-cont">
                            <div class="from-name">{{ interface.device}}</div>
                            <div class="from-port">{{ interface.name}}</div>
                            <div class="from-label">{{ interface.label}}</div>
                            <div class="from-type">{{ interface.type}}</div>
                        </div>
                        <div class="to-cont">
                            <div class="to-name">{{ connection.far.device.name}}</div>
                            <div class="to-device">{{ connection.far.device.device_type}}</div>
                            <div class="to-port">{{ connection.far.name}}</div>
                            <div class="to-label">{{ connection.far.label}}</div>
                            <div class="to-type">{{ connection.far.type}}</div>
                            {% if interface.untagged_vlan.vid %}
                                <div class="to-vlan">{{vlan|replace('vlan_', 'VLAN: ')}}</div>
                            {% elif interface.lag.label is defined %}
                                <div class="to-vlan">LAG</div>
                            {% endif %}
                        </div>
                        <div class="patch-cont">
                            <div class="to-name">{{ connection.patch.device.name}}</div>
                            <div class="to-device">{{ connection.patch.device.device_type}}</div>
                            <div class="to-port">{{ connection.patch.name}}</div>
                            <div class="to-label">{{ connection.patch.label}}</div>
                            <div class="to-type">{{ connection.patch.type}}</div>
                            {% if interface.untagged_vlan.vid %}
                                <div class="to-vlan">{{vlan|replace('vlan_', 'VLAN: ')}}</div>
                            {% elif interface.lag.label is defined %}
                                <div class="to-vlan">LAG</div>
                            {% endif %}
                        </div>
                        <div class="port-mode">{{ interface.type }}</div>
                        <div class="port-label">{{label|replace(prefix1,'')|replace(prefix2, '')}}</div>
                        {% if interface.untagged_vlan.vid %}
                            <div class="type-vlan">{{interface.untagged_vlan.vid}}</div>
                        {% elif interface.lag.label is defined %}
                            <div class="type-vlan">LAG</div>
                        {% endif %}
                    </section>
                {% else %}
                    <section class="empty {{vlan}} port_{{label}} {{name}} {% if interface.enabled == false %}disabled{% endif %}"
                        data-mode="{{interface.type}}"
                        style="{{background.value}}">
                        <div class="vlanAssign" data-id="{{interface.id}}"></div>
                        <div class="empty-text">
                            <span class="quickTerm" data-url="/dcim/cables/add/?a_terminations_type=dcim.interface&a_terminations={{interface.id}}&b_terminations_type=dcim.interface&iframed=true&return_url=/dcim/interfaces/?device_id={{interface.device.id}}" target="_">
                                {% if interface.enabled == false %}
                                    Disabled
                                {% elif interface.description != "" %}                           
                                    {{interface.description}}
                                {% else %}
                                    Empty
                                {% endif %}
                            </span>
                            {% if interface.lag.label is defined %}
                                <div class="empty-mode">LAG ({{interface.lag.label}})</div>
                            {% elif interface.mode == 'access' %}
                                <div class="empty-mode">{{interface.untagged_vlan}}</div>
                            {% elif interface.mode == 'tagged' or interface.mode == 'tagged-all' %}
                                <div class="empty-mode">Trunk</div>
                            {% endif %}
                        </div>
                        <div class="port-label">{{label|replace(prefix1,'')|replace(prefix2, '')}}</div>
                        {% if interface.untagged_vlan.vid %}
                            <div class="type-vlan">{{interface.untagged_vlan.vid}}</div>
                        {% elif interface.lag.label is defined %}
                            <div class="type-vlan">LAG</div>
                        {% elif interface.mode == 'tagged' or interface.mode == 'tagged-all' %}
                            <div class="type-vlan">Trunk</div>
                        {% endif %}
                    </section>
                {% endif %}
            {% endif %}
        {% endfor %}
        {% if lanes > 0 %}
            {% for qsfp in range(ports2) %}
                <div class="qsfp-{{qsfp+startport}} qsfp"></div>
            {% endfor %}
        {% endif %}
        {% if last_linecard != 0 %}
            {% for cardNum in range(last_linecard - first_linecard + 1) %}
                {% set card = cardNum + first_linecard %}
                {% for portNum in range(ports1+startport) %}
                    {% set port = portNum + startport %}
                    {% if lanes > 0 %}
                        <div class="qsfp-{{card}}-{{port}} qsfp"></div>
                    {% endif %}
                {% endfor %}
                <div class="linecardHeader linecardHeader-{{card}}">Linecard {{card}}</div>
            {% endfor %}
        {% endif %}
        <div class="blank"></div><div class="blank2"></div>
    </main>
    <iframe id="frame" src="" onLoad="checkFrame(this.getAttribute('src'), this.contentWindow.location);"></iframe>
    <section class="vlanButtons">
    {%- for vlan in vlans %}
        {%- if vlan.vid is defined %}
            {%- set hsl = namespace(h=204) %}
            {%- set hsl = namespace(s=13) %}
            {%- set hsl = namespace(l=22) %}
            {%- set background = namespace(value="") %}
            {%- if vlan.vid %}
                {%- if vlan.vid > 39 and vlan.vid < 50 %}
                    {%- set shift = (vlan.vid|int() - 40) %}
                    {%- set hsl.h = 145 - shift * 3 %}
                    {%- set hsl.s = 22 + shift * 7 %}
                    {%- set hsl.l = 13 + shift * 3 %}
                {%- elif vlan.vid > 999 and vlan.vid < 1050 %}
                    {%- set shift = (vlan.vid|int() - 1000) %}
                    {%- set hsl.h = 455 - shift * 6 %}
                    {%- set hsl.s = 40 %}
                    {%- set hsl.l = 25 %}
                {%- elif vlan.vid == 170 %}
                    {%- set hsl.h = 202 %}
                    {%- set hsl.s = 51 %}
                    {%- set hsl.l = 35 %}
                {%- else %}
                    {%- set hsl.h = 204 %}
                    {%- set hsl.s = 13 %}
                    {%- set hsl.l = 22 %}
                {%- endif %}
                {%- set background.value = "background-color: hsl("~hsl.h~","~hsl.s~"%,calc("~hsl.l~"% + var(--hsl-offset))" %}
                {%- if vlan.cf.colour != None %}
                    {%- set colours = vlan.cf.colour.split(',') %}
                    {%- set background.value = "background-color: hsl("~colours[0]~","~colours[1]~",calc("~colours[2]~" + var(--hsl-offset))" %}
                {%- endif %}
            {%- endif %}
            <button class="vlanAssignButton{% if vlan.cf.hidden %} d-none{% endif %}" style="{{background.value}}" data-id="{{vlan.vid}}" data-idid="{{vlan.id}}">{{vlan.vid}} - {{vlan.name}}</button>
        {%- endif %}
    {%- endfor %}
        <button class="vlanAssignButton" style="" data-id="none" data-idid="none">None</button>
    </section>
</body>
</html>